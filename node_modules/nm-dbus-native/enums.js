//NM_STATE

module.exports.NM_STATE_UNKNOWN = 0
  //Networking state is unknown. 
module.exports.NM_STATE_ASLEEP = 10
  //Networking is inactive and all devices are disabled. 
module.exports.NM_STATE_DISCONNECTED = 20
  //There is no active network connection. 
module.exports.NM_STATE_DISCONNECTING = 30
  //Network connections are being cleaned up. 
module.exports.NM_STATE_CONNECTING = 40
  //A network device is connecting to a network and there is no other available network connection. 
module.exports.NM_STATE_CONNECTED_LOCAL = 50
  //A network device is connected, but there is only link-local connectivity. 
module.exports.NM_STATE_CONNECTED_SITE = 60
  //A network device is connected, but there is only site-local connectivity. 
module.exports.NM_STATE_CONNECTED_GLOBAL = 70

/**
 * resolves the networkmanager state into a string describing it
 * @param int {integer} one of the enums of NM_STATE_* type
 * @returns {string} the description of that enum
 */
module.exports.resolveNM_STATE = function(int){
    switch(int){
        case module.exports.NM_STATE_UNKNOWN:
            return "Networking state is unknown.";
        case module.exports.NM_STATE_ASLEEP:
            return "Networking is inactive and all devices are disabled."; 
        case module.exports.NM_STATE_DISCONNECTED:
            return "There is no active network connection."; 
        case module.exports.NM_STATE_DISCONNECTING:
            return "Network connections are being cleaned up.";
        case module.exports.NM_STATE_CONNECTING:
            return "A network device is connecting to a network and there is no other available network connection."; 
        case module.exports.NM_STATE_CONNECTED_LOCAL:
            return "A network device is connected, but there is only link-local connectivity."; 
        case module.exports.NM_STATE_CONNECTED_SITE:
            return "A network device is connected, but there is only site-local connectivity."; 
        case module.exports.NM_STATE_CONNECTED_GLOBAL:
            return "A network device is connected, with global network connectivity."
    }
}

//NM_802_11_AP_FLAGS

module.exports.NM_802_11_AP_FLAGS_NONE = 0x0
  //Null capability - says nothing about the access point.
module.exports.NM_802_11_AP_FLAGS_PRIVACY = 0x1
  //Access point supports privacy measures.

/**
 * resolves the accesspoint wifi flags into an array describing them
 * @param int {Integer} flags of that 802.11 ap
 * @returns {Array} Array of Strings of flag descriptions
 */
module.exports.resolveNM_802_11_AP_FLAGS = function(int){
    var flags = [];
    if( int & module.exports.NM_802_11_AP_FLAGS_NONE ){
        flags.push("Null capability - says nothing about the access point.");
    }
    if( int & module.exports.NM_802_11_AP_FLAGS_PRIVACY ){
        flags.push("Access point supports privacy measures.");
    }
    return flags;
}

//NM_802_11_AP_SEC

module.exports.NM_802_11_AP_SEC_NONE = 0x0
  //Null flag.
module.exports.NM_802_11_AP_SEC_PAIR_WEP40 = 0x1
  //Access point supports pairwise 40-bit WEP encryption.
module.exports.NM_802_11_AP_SEC_PAIR_WEP104 = 0x2
  //Access point supports pairwise 104-bit WEP encryption.
module.exports.NM_802_11_AP_SEC_PAIR_TKIP = 0x4
  //Access point supports pairwise TKIP encryption.
module.exports.NM_802_11_AP_SEC_PAIR_CCMP = 0x8
  //Access point supports pairwise CCMP encryption.
module.exports.NM_802_11_AP_SEC_GROUP_WEP40 = 0x10
  //Access point supports a group 40-bit WEP cipher.
module.exports.NM_802_11_AP_SEC_GROUP_WEP104 = 0x20
  //Access point supports a group 104-bit WEP cipher.
module.exports.NM_802_11_AP_SEC_GROUP_TKIP = 0x40
  //Access point supports a group TKIP cipher.
module.exports.NM_802_11_AP_SEC_GROUP_CCMP = 0x80
  //Access point supports a group CCMP cipher.
module.exports.NM_802_11_AP_SEC_KEY_MGMT_PSK = 0x100
  //Access point supports PSK key management.
module.exports.NM_802_11_AP_SEC_KEY_MGMT_802_1X = 0x200
  //Access point supports 802.1x key management.

/**
 * resolves the accesspoint security flags into an array describing them
 * @param int {Integer} flags of that 802.11 ap security type
 * @returns {Array} Array of Strings of flag descriptions
 */
module.exports.resolveNM_802_11_AP_SEC = function(int){
    var flags = [];
    if( int & module.exports.NM_802_11_AP_SEC_NONE ){
        flags.push("Null flag.");
    }
    if( int & module.exports.NM_802_11_AP_SEC_PAIR_WEP40 ){
        flags.push("Access point supports pairwise 40-bit WEP encryption.");
    }
    if( int & module.exports.NM_802_11_AP_SEC_PAIR_WEP104 ){
        flags.push("Access point supports pairwise 104-bit WEP encryption.");
    }
    if( int & module.exports.NM_802_11_AP_SEC_PAIR_TKIP ){
        flags.push("Access point supports pairwise TKIP encryption.");
    }
    if( int & module.exports.NM_802_11_AP_SEC_PAIR_CCMP ){
        flags.push("Access point supports pairwise CCMP encryption.");
    }
    if( int & module.exports.NM_802_11_AP_SEC_GROUP_WEP40 ){
        flags.push("Access point supports a group 40-bit WEP cipher.");
    }
    if( int & module.exports.NM_802_11_AP_SEC_GROUP_WEP104 ){
        flags.push("Access point supports pairwise 40-bit WEP encryption.");
    }
    if( int & module.exports.NM_802_11_AP_SEC_GROUP_TKIP ){
        flags.push("Access point supports a group TKIP cipher.");
    }
    if( int & module.exports.NM_802_11_AP_SEC_GROUP_CCMP ){
        flags.push("Access point supports a group CCMP cipher.");
    }
    if( int & module.exports.NM_802_11_AP_SEC_KEY_MGMT_PSK ){
        flags.push("Access point supports PSK key management.");
    }
    if( int & module.exports.NM_802_11_AP_SEC_KEY_MGMT_802_1X ){
        flags.push("Access point supports 802.1x key management.");
    }
    return flags;
}




//NM_DEVICE_STATE

module.exports.NM_DEVICE_STATE_UNKNOWN = 0
  //The device is in an unknown state. 
module.exports.NM_DEVICE_STATE_UNMANAGED = 10
  //The device is recognized but not managed by NetworkManager. 
module.exports.NM_DEVICE_STATE_UNAVAILABLE = 20
  //The device cannot be used (carrier off, rfkill, etc). 
module.exports.NM_DEVICE_STATE_DISCONNECTED = 30
  //The device is not connected. 
module.exports.NM_DEVICE_STATE_PREPARE = 40
  //The device is preparing to connect. 
module.exports.NM_DEVICE_STATE_CONFIG = 50
  //The device is being configured. 
module.exports.NM_DEVICE_STATE_NEED_AUTH = 60
  //The device is awaiting secrets necessary to continue connection. 
module.exports.NM_DEVICE_STATE_IP_CONFIG = 70
  //The IP settings of the device are being requested and configured. 
module.exports.NM_DEVICE_STATE_IP_CHECK = 80
  //The device's IP connectivity ability is being determined. 
module.exports.NM_DEVICE_STATE_SECONDARIES = 90
  //The device is waiting for secondary connections to be activated. 
module.exports.NM_DEVICE_STATE_ACTIVATED = 100
  //The device is active. 
module.exports.NM_DEVICE_STATE_DEACTIVATING = 110
  //The device's network connection is being torn down. 
module.exports.NM_DEVICE_STATE_FAILED = 120
  //The device is in a failure state following an attempt to activate it. 


/**
 * resolves the current state of the device into a string describing it
 * @param int {Integer} flags of that 802.11 ap security type
 * @returns {String} Array of Strings of flag descriptions
 */
module.exports.resolveNM_STATE = function(int){
    switch(int){
        case module.exports.NM_DEVICE_STATE_UNKNOWN:
            return "The device is in an unknown state."
        case module.exports.NM_DEVICE_STATE_UNMANAGED:
            return "The device is recognized but not managed by NetworkManager."
        case module.exports.NM_DEVICE_STATE_UNAVAILABLE:
            return "The device cannot be used (carrier off, rfkill, etc)."
        case module.exports.NM_DEVICE_STATE_DISCONNECTED:
            return "The device is not connected."
        case module.exports.NM_DEVICE_STATE_PREPARE:
            return "The device is preparing to connect."
        case module.exports.NM_DEVICE_STATE_CONFIG:
            return "The device is being configured."
        case module.exports.NM_DEVICE_STATE_NEED_AUTH:
            return "The device is awaiting secrets necessary to continue connection."
        case module.exports.NM_DEVICE_STATE_IP_CONFIG:
            return "The IP settings of the device are being requested and configured."
        case module.exports.NM_DEVICE_STATE_IP_CHECK:
            return "The device's IP connectivity ability is being determined."
        case module.exports.NM_DEVICE_STATE_SECONDARIES:
            return "The device is waiting for secondary connections to be activated."
        case module.exports.NM_DEVICE_STATE_ACTIVATED:
            return "The device is active."
        case module.exports.NM_DEVICE_STATE_DEACTIVATING:
            return "The device's network connection is being torn down."
        case module.exports.NM_DEVICE_STATE_FAILED:
            return "The device is in a failure state following an attempt to activate it."
    }
}

//NM_DEVICE_TYPE

module.exports.NM_DEVICE_TYPE_UNKNOWN = 0
  //The device type is unknown. 
module.exports.NM_DEVICE_TYPE_ETHERNET = 1
  //The device is wired Ethernet device. 
module.exports.NM_DEVICE_TYPE_WIFI = 2
  //The device is an 802.11 WiFi device. 
module.exports.NM_DEVICE_TYPE_UNUSED1 = 3
  //Unused
module.exports.NM_DEVICE_TYPE_UNUSED2 = 4
  //Unused
module.exports.NM_DEVICE_TYPE_BT = 5
  //The device is Bluetooth device that provides PAN or DUN capabilities. 
module.exports.NM_DEVICE_TYPE_OLPC_MESH = 6
  //The device is an OLPC mesh networking device. 
module.exports.NM_DEVICE_TYPE_WIMAX = 7
  //The device is an 802.16e Mobile WiMAX device. 
module.exports.NM_DEVICE_TYPE_MODEM = 8
  //The device is a modem supporting one or more of analog telephone, CDMA/EVDO, GSM/UMTS/HSPA, or LTE standards to access a cellular or wireline data network. 
module.exports.NM_DEVICE_TYPE_INFINIBAND = 9
  //The device is an IP-capable InfiniBand interface. 
module.exports.NM_DEVICE_TYPE_BOND = 10
  //The device is a bond master interface. 
module.exports.NM_DEVICE_TYPE_VLAN = 11
  //The device is a VLAN interface. 
module.exports.NM_DEVICE_TYPE_ADSL = 12
  //The device is an ADSL device supporting PPPoE and PPPoATM protocols. 
module.exports.NM_DEVICE_TYPE_BRIDGE = 13
  //The device is a bridge interface. 

//NM_DEVICE_STATE_REASON

module.exports.NM_DEVICE_STATE_REASON_UNKNOWN = 0
  //The reason for the device state change is unknown. 
module.exports.NM_DEVICE_STATE_REASON_NONE = 1
  //The state change is normal. 
module.exports.NM_DEVICE_STATE_REASON_NOW_MANAGED = 2
  //The device is now managed. 
module.exports.NM_DEVICE_STATE_REASON_NOW_UNMANAGED = 3
  //The device is no longer managed. 
module.exports.NM_DEVICE_STATE_REASON_CONFIG_FAILED = 4
  //The device could not be readied for configuration. 
module.exports.NM_DEVICE_STATE_REASON_CONFIG_UNAVAILABLE = 5
  //IP configuration could not be reserved (no available address, timeout, etc). 
module.exports.NM_DEVICE_STATE_REASON_CONFIG_EXPIRED = 6
  //The IP configuration is no longer valid. 
module.exports.NM_DEVICE_STATE_REASON_NO_SECRETS = 7
  //Secrets were required, but not provided. 
module.exports.NM_DEVICE_STATE_REASON_SUPPLICANT_DISCONNECT = 8
  //The 802.1X supplicant disconnected from the access point or authentication server. 
module.exports.NM_DEVICE_STATE_REASON_SUPPLICANT_CONFIG_FAILED = 9
  //Configuration of the 802.1X supplicant failed. 
module.exports.NM_DEVICE_STATE_REASON_SUPPLICANT_FAILED = 10
  //The 802.1X supplicant quit or failed unexpectedly. 
module.exports.NM_DEVICE_STATE_REASON_SUPPLICANT_TIMEOUT = 11
  //The 802.1X supplicant took too long to authenticate. 
module.exports.NM_DEVICE_STATE_REASON_PPP_START_FAILED = 12
  //The PPP service failed to start within the allowed time. 
module.exports.NM_DEVICE_STATE_REASON_PPP_DISCONNECT = 13
  //The PPP service disconnected unexpectedly. 
module.exports.NM_DEVICE_STATE_REASON_PPP_FAILED = 14
  //The PPP service quit or failed unexpectedly. 
module.exports.NM_DEVICE_STATE_REASON_DHCP_START_FAILED = 15
  //The DHCP service failed to start within the allowed time. 
module.exports.NM_DEVICE_STATE_REASON_DHCP_ERROR = 16
  //The DHCP service reported an unexpected error. 
module.exports.NM_DEVICE_STATE_REASON_DHCP_FAILED = 17
  //The DHCP service quit or failed unexpectedly. 
module.exports.NM_DEVICE_STATE_REASON_SHARED_START_FAILED = 18
  //The shared connection service failed to start. 
module.exports.NM_DEVICE_STATE_REASON_SHARED_FAILED = 19
  //The shared connection service quit or failed unexpectedly. 
module.exports.NM_DEVICE_STATE_REASON_AUTOIP_START_FAILED = 20
  //The AutoIP service failed to start. 
module.exports.NM_DEVICE_STATE_REASON_AUTOIP_ERROR = 21
  //The AutoIP service reported an unexpected error. 
module.exports.NM_DEVICE_STATE_REASON_AUTOIP_FAILED = 22
  //The AutoIP service quit or failed unexpectedly. 
module.exports.NM_DEVICE_STATE_REASON_MODEM_BUSY = 23
  //Dialing failed because the line was busy. 
module.exports.NM_DEVICE_STATE_REASON_MODEM_NO_DIAL_TONE = 24
  //Dialing failed because there was no dial tone. 
module.exports.NM_DEVICE_STATE_REASON_MODEM_NO_CARRIER = 25
  //Dialing failed because there was carrier. 
module.exports.NM_DEVICE_STATE_REASON_MODEM_DIAL_TIMEOUT = 26
  //Dialing timed out. 
module.exports.NM_DEVICE_STATE_REASON_MODEM_DIAL_FAILED = 27
  //Dialing failed. 
module.exports.NM_DEVICE_STATE_REASON_MODEM_INIT_FAILED = 28
  //Modem initialization failed. 
module.exports.NM_DEVICE_STATE_REASON_GSM_APN_FAILED = 29
  //Failed to select the specified GSM APN. 
module.exports.NM_DEVICE_STATE_REASON_GSM_REGISTRATION_NOT_SEARCHING = 30
  //Not searching for networks. 
module.exports.NM_DEVICE_STATE_REASON_GSM_REGISTRATION_DENIED = 31
  //Network registration was denied. 
module.exports.NM_DEVICE_STATE_REASON_GSM_REGISTRATION_TIMEOUT = 32
  //Network registration timed out. 
module.exports.NM_DEVICE_STATE_REASON_GSM_REGISTRATION_FAILED = 33
  //Failed to register with the requested GSM network. 
module.exports.NM_DEVICE_STATE_REASON_GSM_PIN_CHECK_FAILED = 34
  //PIN check failed. 
module.exports.NM_DEVICE_STATE_REASON_FIRMWARE_MISSING = 35
  //Necessary firmware for the device may be missing. 
module.exports.NM_DEVICE_STATE_REASON_REMOVED = 36
  //The device was removed. 
module.exports.NM_DEVICE_STATE_REASON_SLEEPING = 37
  //NetworkManager went to sleep. 
module.exports.NM_DEVICE_STATE_REASON_CONNECTION_REMOVED = 38
  //The device's active connection was removed or disappeared. 
module.exports.NM_DEVICE_STATE_REASON_USER_REQUESTED = 39
  //A user or client requested the disconnection. 
module.exports.NM_DEVICE_STATE_REASON_CARRIER = 40
  //The device's carrier/link changed. 
module.exports.NM_DEVICE_STATE_REASON_CONNECTION_ASSUMED = 41
  //The device's existing connection was assumed. 
module.exports.NM_DEVICE_STATE_REASON_SUPPLICANT_AVAILABLE = 42
  //The 802.1x supplicant is now available. 
module.exports.NM_DEVICE_STATE_REASON_MODEM_NOT_FOUND = 43
  //The modem could not be found. 
module.exports.NM_DEVICE_STATE_REASON_BT_FAILED = 44
  //The Bluetooth connection timed out or failed. 
module.exports.NM_DEVICE_STATE_REASON_GSM_SIM_NOT_INSERTED = 45
  //GSM Modem's SIM Card not inserted. 
module.exports.NM_DEVICE_STATE_REASON_GSM_SIM_PIN_REQUIRED = 46
  //GSM Modem's SIM Pin required. 
module.exports.NM_DEVICE_STATE_REASON_GSM_SIM_PUK_REQUIRED = 47
  //GSM Modem's SIM Puk required. 
module.exports.NM_DEVICE_STATE_REASON_GSM_SIM_WRONG = 48
  //GSM Modem's SIM wrong 
module.exports.NM_DEVICE_STATE_REASON_INFINIBAND_MODE = 49
  //InfiniBand device does not support connected mode. 
module.exports.NM_DEVICE_STATE_REASON_DEPENDENCY_FAILED = 50
  //A dependency of the connection failed. 
module.exports.NM_DEVICE_STATE_REASON_BR2684_FAILED = 51
  //Problem with the RFC 2684 Ethernet over ADSL bridge. 
module.exports.NM_DEVICE_STATE_REASON_MODEM_MANAGER_UNAVAILABLE = 52
  //ModemManager was not running or quit unexpectedly. 
module.exports.NM_DEVICE_STATE_REASON_SSID_NOT_FOUND = 53
  //The 802.11 Wi-Fi network could not be found. 
module.exports.NM_DEVICE_STATE_REASON_SECONDARY_CONNECTION_FAILED = 54
  //A secondary connection of the base connection failed. 


/**
 * resolves the reason of the device state change into a string describing it
 * @param int {Integer} A reason for the state transition.
 * @returns {String} String describing the reason.
 */
module.exports.resolveNM_DEVICE_STATE_REASON = function(int) {
    switch (int) {
        case module.exports.NM_DEVICE_STATE_REASON_UNKNOWN:
            return "The reason for the device state change is unknown.";
        case module.exports.NM_DEVICE_STATE_REASON_NONE:
            return "The state change is normal.";
        case module.exports.NM_DEVICE_STATE_REASON_NOW_MANAGED:
            return "The device is now managed.";
        case module.exports.NM_DEVICE_STATE_REASON_NOW_UNMANAGED:
            return "The device is no longer managed.";
        case module.exports.NM_DEVICE_STATE_REASON_CONFIG_FAILED:
            return "The device could not be readied for configuration.";
        case module.exports.NM_DEVICE_STATE_REASON_CONFIG_UNAVAILABLE:
            return "IP configuration could not be reserved (no available address, timeout, etc).";
        case module.exports.NM_DEVICE_STATE_REASON_CONFIG_EXPIRED:
            return "The IP configuration is no longer valid.";
        case module.exports.NM_DEVICE_STATE_REASON_NO_SECRETS:
            return "Secrets were required, but not provided.";
        case module.exports.NM_DEVICE_STATE_REASON_SUPPLICANT_DISCONNECT:
            return "The 802.1X supplicant disconnected from the access point or authentication server.";
        case module.exports.NM_DEVICE_STATE_REASON_SUPPLICANT_CONFIG_FAILED:
            return "Configuration of the 802.1X supplicant failed.";
        case module.exports.NM_DEVICE_STATE_REASON_SUPPLICANT_FAILED:
            return "The 802.1X supplicant quit or failed unexpectedly.";
        case module.exports.NM_DEVICE_STATE_REASON_SUPPLICANT_TIMEOUT:
            return "The 802.1X supplicant took too long to authenticate.";
        case module.exports.NM_DEVICE_STATE_REASON_PPP_START_FAILED:
            return "The PPP service failed to start within the allowed time.";
        case module.exports.NM_DEVICE_STATE_REASON_PPP_DISCONNECT:
            return "The PPP service disconnected unexpectedly.";
        case module.exports.NM_DEVICE_STATE_REASON_PPP_FAILED:
            return "The PPP service quit or failed unexpectedly.";
        case module.exports.NM_DEVICE_STATE_REASON_DHCP_START_FAILED:
            return "The DHCP service failed to start within the allowed time.";
        case module.exports.NM_DEVICE_STATE_REASON_DHCP_ERROR:
            return "The DHCP service reported an unexpected error.";
        case module.exports.NM_DEVICE_STATE_REASON_DHCP_FAILED:
            return "The DHCP service quit or failed unexpectedly.";
        case module.exports.NM_DEVICE_STATE_REASON_SHARED_START_FAILED:
            return "The shared connection service failed to start.";
        case module.exports.NM_DEVICE_STATE_REASON_SHARED_FAILED:
            return "The shared connection service quit or failed unexpectedly.";
        case module.exports.NM_DEVICE_STATE_REASON_AUTOIP_START_FAILED:
            return "The AutoIP service failed to start.";
        case module.exports.NM_DEVICE_STATE_REASON_AUTOIP_ERROR:
            return "The AutoIP service reported an unexpected error.";
        case module.exports.NM_DEVICE_STATE_REASON_AUTOIP_FAILED:
            return "The AutoIP service quit or failed unexpectedly.";
        case module.exports.NM_DEVICE_STATE_REASON_MODEM_BUSY:
            return "Dialing failed because the line was busy.";
        case module.exports.NM_DEVICE_STATE_REASON_MODEM_NO_DIAL_TONE:
            return "Dialing failed because there was no dial tone.";
        case module.exports.NM_DEVICE_STATE_REASON_MODEM_NO_CARRIER:
            return "Dialing failed because there was carrier.";
        case module.exports.NM_DEVICE_STATE_REASON_MODEM_DIAL_TIMEOUT:
            return "Dialing timed out.";
        case module.exports.NM_DEVICE_STATE_REASON_MODEM_DIAL_FAILED:
            return "Dialing failed.";
        case module.exports.NM_DEVICE_STATE_REASON_MODEM_INIT_FAILED:
            return "Modem initialization failed.";
        case module.exports.NM_DEVICE_STATE_REASON_GSM_APN_FAILED:
            return "Failed to select the specified GSM APN.";
        case module.exports.NM_DEVICE_STATE_REASON_GSM_REGISTRATION_NOT_SEARCHING:
            return "Not searching for networks.";
        case module.exports.NM_DEVICE_STATE_REASON_GSM_REGISTRATION_DENIED:
            return "Network registration was denied.";
        case module.exports.NM_DEVICE_STATE_REASON_GSM_REGISTRATION_TIMEOUT:
            return "Network registration timed out.";
        case module.exports.NM_DEVICE_STATE_REASON_GSM_REGISTRATION_FAILED:
            return "Failed to register with the requested GSM network.";
        case module.exports.NM_DEVICE_STATE_REASON_GSM_PIN_CHECK_FAILED:
            return "PIN check failed.";
        case module.exports.NM_DEVICE_STATE_REASON_FIRMWARE_MISSING:
            return "Necessary firmware for the device may be missing.";
        case module.exports.NM_DEVICE_STATE_REASON_REMOVED:
            return "The device was removed.";
        case module.exports.NM_DEVICE_STATE_REASON_SLEEPING:
            return "NetworkManager went to sleep.";
        case module.exports.NM_DEVICE_STATE_REASON_CONNECTION_REMOVED:
            return "The device's active connection was removed or disappeared.";
        case module.exports.NM_DEVICE_STATE_REASON_USER_REQUESTED:
            return "A user or client requested the disconnection.";
        case module.exports.NM_DEVICE_STATE_REASON_CARRIER:
            return "The device's carrier/link changed.";
        case module.exports.NM_DEVICE_STATE_REASON_CONNECTION_ASSUMED:
            return "The device's existing connection was assumed.";
        case module.exports.NM_DEVICE_STATE_REASON_SUPPLICANT_AVAILABLE:
            return "The 802.1x supplicant is now available.";
        case module.exports.NM_DEVICE_STATE_REASON_MODEM_NOT_FOUND:
            return "The modem could not be found.";
        case module.exports.NM_DEVICE_STATE_REASON_BT_FAILED:
            return "The Bluetooth connection timed out or failed.";
        case module.exports.NM_DEVICE_STATE_REASON_GSM_SIM_NOT_INSERTED:
            return "GSM Modem's SIM Card not inserted.";
        case module.exports.NM_DEVICE_STATE_REASON_GSM_SIM_PIN_REQUIRED:
            return "GSM Modem's SIM Pin required.";
        case module.exports.NM_DEVICE_STATE_REASON_GSM_SIM_PUK_REQUIRED:
            return "GSM Modem's SIM Puk required.";
        case module.exports.NM_DEVICE_STATE_REASON_GSM_SIM_WRONG:
            return "GSM Modem's SIM wrong.";
        case module.exports.NM_DEVICE_STATE_REASON_INFINIBAND_MODE:
            return "InfiniBand device does not support connected mode.";
        case module.exports.NM_DEVICE_STATE_REASON_DEPENDENCY_FAILED:
            return "A dependency of the connection failed.";
        case module.exports.NM_DEVICE_STATE_REASON_BR2684_FAILED:
            return "Problem with the RFC 2684 Ethernet over ADSL bridge.";
        case module.exports.NM_DEVICE_STATE_REASON_MODEM_MANAGER_UNAVAILABLE:
            return "ModemManager was not running or quit unexpectedly.";
        case module.exports.NM_DEVICE_STATE_REASON_SSID_NOT_FOUND:
            return "The 802.11 Wi-Fi network could not be found.";
        case module.exports.NM_DEVICE_STATE_REASON_SECONDARY_CONNECTION_FAILED:
            return "A secondary connection of the base connection failed.";
    }
}


//NM_DEVICE_CAP

module.exports.NM_DEVICE_CAP_NONE = 0x0
  //Null capability.
module.exports.NM_DEVICE_CAP_NM_SUPPORTED = 0x1
  //The device is supported by NetworkManager.
module.exports.NM_DEVICE_CAP_CARRIER_DETECT = 0x2
  //The device supports carrier detection.

//NM_802_11_DEVICE_CAP

module.exports.NM_802_11_DEVICE_CAP_NONE = 0x0
  //Null capability - syntactic sugar for no capabilities supported. Do not AND this with other capabilities!
module.exports.NM_802_11_DEVICE_CAP_CIPHER_WEP40 = 0x1
  //The device supports the 40-bit WEP cipher.
module.exports.NM_802_11_DEVICE_CAP_CIPHER_WEP104 = 0x2
  //The device supports the 104-bit WEP cipher.
module.exports.NM_802_11_DEVICE_CAP_CIPHER_TKIP = 0x4
  //The device supports the TKIP cipher.
module.exports.NM_802_11_DEVICE_CAP_CIPHER_CCMP = 0x8
  //The device supports the CCMP cipher.
module.exports.NM_802_11_DEVICE_CAP_WPA = 0x10
  //The device supports the WPA encryption/authentication protocol.
module.exports.NM_802_11_DEVICE_CAP_RSN = 0x20
  //The device supports the RSN encryption/authentication protocol.
module.exports.NM_802_11_DEVICE_CAP_AP = 0x40
  //The device supports Access Point mode.
module.exports.NM_802_11_DEVICE_CAP_ADHOC = 0x80
  //The device supports Ad-Hoc mode.


//NM_DEVICE_MODEM_CAPABILITIES

module.exports.NM_DEVICE_MODEM_CAPABILITY_NONE = 0x0
  //Modem has no capabilties.
module.exports.NM_DEVICE_MODEM_CAPABILITY_POTS = 0x1
  //Modem supports the analog wired telephone network (ie 56k dialup) and does not have wireless/cellular capabilities. 
module.exports.NM_DEVICE_MODEM_CAPABILITY_CDMA_EVDO = 0x2
  //Modem supports at least one of CDMA 1xRTT, EVDO revision 0, EVDO revision A, or EVDO revision B. 
module.exports.NM_DEVICE_MODEM_CAPABILITY_GSM_UMTS = 0x4
  //Modem supports at least one of GSM, GPRS, EDGE, UMTS, HSDPA, HSUPA, or HSPA+ packet switched data capability. 
module.exports.NM_DEVICE_MODEM_CAPABILITY_LTE = 0x8
  //Modem has at LTE data capability. 


//NM_BT_CAPABILITIES

module.exports.NM_BT_CAPABILITY_NONE = 0x0
  //The device has no recognized capabilities.
module.exports.NM_BT_CAPABILITY_DUN = 0x1
  //The device supports Bluetooth Dial-Up Networking.
module.exports.NM_BT_CAPABILITY_PAN = 0x2
  //The device supports Bluetooth Personal Area Networking.


//NM_WIMAX_NSP_NETWORK_TYPE

module.exports.NM_WIMAX_NSP_NETWORK_TYPE_UNKNOWN = 0x0
  //Unknown network.
module.exports.NM_WIMAX_NSP_NETWORK_TYPE_HOME = 0x1
  //Home network.
module.exports.NM_WIMAX_NSP_NETWORK_TYPE_PARTNER = 0x2
  //Partner network.
module.exports.NM_WIMAX_NSP_NETWORK_TYPE_ROAMING_PARTNER = 0x3
  //Roaming partner network.


//NM_ACTIVE_CONNECTION_STATE

module.exports.NM_ACTIVE_CONNECTION_STATE_UNKNOWN = 0
  //The active connection is in an unknown state. 
module.exports.NM_ACTIVE_CONNECTION_STATE_ACTIVATING = 1
  //The connection is activating. 
module.exports.NM_ACTIVE_CONNECTION_STATE_ACTIVATED = 2
  //The connection is activated. 
module.exports.NM_ACTIVE_CONNECTION_STATE_DEACTIVATING = 3
  //The connection is being torn down and cleaned up. 
module.exports.NM_ACTIVE_CONNECTION_STATE_DEACTIVATED = 4
  //The connection is no longer active.


//NM_SECRET_AGENT_GET_SECRETS_FLAGS

module.exports.NM_SECRET_AGENT_GET_SECRETS_FLAG_NONE = 0x0
  //No special behavior; by default no user interaction is allowed and requests for secrets are fulfilled from persistent storage, or if no secrets are available an error is returned. 
module.exports.NM_SECRET_AGENT_GET_SECRETS_FLAG_ALLOW_INTERACTION = 0x1
  //Allows the request to interact with the user, possibly prompting via UI for secrets if any are required, or if none are found in persistent storage. 
module.exports.NM_SECRET_AGENT_GET_SECRETS_FLAG_REQUEST_NEW = 0x2
  //Explicitly prompt for new secrets from the user. This flag signals that NetworkManager thinks any existing secrets are invalid or wrong. This flag implies that interaction is allowed. 
module.exports.NM_SECRET_AGENT_GET_SECRETS_FLAG_USER_REQUESTED = 0x4
  //Set if the request was initiated by user-requested action via the D-Bus interface, as opposed to automatically initiated by NetworkManager in response to (for example) scan results or carrier changes. 


//NM_VPN_CONNECTION_STATE

module.exports.NM_VPN_CONNECTION_STATE_UNKNOWN = 0
  //The state of the VPN connection is unknown. 
module.exports.NM_VPN_CONNECTION_STATE_PREPARE = 1
  //The VPN connection is preparing to connect. 
module.exports.NM_VPN_CONNECTION_STATE_NEED_AUTH = 2
  //The VPN connection needs authorization credentials. 
module.exports.NM_VPN_CONNECTION_STATE_CONNECT = 3
  //The VPN connection is being established. FIXME: Should be CONNECTING or CONNECTED. 
module.exports.NM_VPN_CONNECTION_STATE_IP_CONFIG_GET = 4
  //The VPN connection is getting an IP address. FIXME: Should be an -ING 
module.exports.NM_VPN_CONNECTION_STATE_ACTIVATED = 5
  //The VPN connection is active. 
module.exports.NM_VPN_CONNECTION_STATE_FAILED = 6
  //The VPN connection failed. 
module.exports.NM_VPN_CONNECTION_STATE_DISCONNECTED = 7
  //The VPN connection is disconnected. 

//NM_VPN_CONNECTION_STATE_REASON

module.exports.NM_VPN_CONNECTION_STATE_REASON_UNKNOWN = 0
  //The reason for the VPN connection state change is unknown. 
module.exports.NM_VPN_CONNECTION_STATE_REASON_NONE = 1
  //No reason was given for the VPN connection state change. 
module.exports.NM_VPN_CONNECTION_STATE_REASON_USER_DISCONNECTED = 2
  //The VPN connection changed state because the user disconnected it. 
module.exports.NM_VPN_CONNECTION_STATE_REASON_DEVICE_DISCONNECTED = 3
  //The VPN connection changed state because the device it was using was disconnected. 
module.exports.NM_VPN_CONNECTION_STATE_REASON_SERVICE_STOPPED = 4
  //The service providing the VPN connection was stopped. 
module.exports.NM_VPN_CONNECTION_STATE_REASON_IP_CONFIG_INVALID = 5
  //The IP config of the VPN connection was invalid. 
module.exports.NM_VPN_CONNECTION_STATE_REASON_CONNECT_TIMEOUT = 6
  //The connection attempt to the VPN service timed out. 
module.exports.NM_VPN_CONNECTION_STATE_REASON_SERVICE_START_TIMEOUT = 7
  //A timeout occurred while starting the service providing the VPN connection. 
module.exports.NM_VPN_CONNECTION_STATE_REASON_SERVICE_START_FAILED = 8
  //Starting the service starting the service providing the VPN connection failed. 
module.exports.NM_VPN_CONNECTION_STATE_REASON_NO_SECRETS = 9
  //Necessary secrets for the VPN connection were not provided. 
module.exports.NM_VPN_CONNECTION_STATE_REASON_LOGIN_FAILED = 10
  //Authentication to the VPN server failed. 
module.exports.NM_VPN_CONNECTION_STATE_REASON_CONNECTION_REMOVED = 11
  //The connection was deleted from settings.


//NM_VPN_PLUGIN_FAILURE

module.exports.NM_VPN_PLUGIN_FAILURE_LOGIN_FAILED = 0
  //Login failed. 
module.exports.NM_VPN_PLUGIN_FAILURE_CONNECT_FAILED = 1
  //Connect failed. 
module.exports.NM_VPN_PLUGIN_FAILURE_BAD_IP_CONFIG = 2
  //Invalid IP configuration returned from the VPN plugin. 


//NM_802_11_MODE

module.exports.NM_802_11_MODE_UNKNOWN = 0
  //Mode is unknown.
module.exports.NM_802_11_MODE_ADHOC = 1
  //For both devices and access point objects, indicates the object is part of an Ad-Hoc 802.11 network without a central coordinating access point. 
module.exports.NM_802_11_MODE_INFRA = 2
  //The wireless device or access point is in infrastructure mode. For devices, this indicates the device is an 802.11 client/station. For access point objects, this indicates the object is an access point that provides connectivity to clients. 
module.exports.NM_802_11_MODE_AP = 3
  //The device is an access point/hotspot. Not valid for access point objects themselves.
