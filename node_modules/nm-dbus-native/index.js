//- big libraries
var dbus = require('dbus-native');
var _ = require('underscore');
var async = require('async');

// lots of static names for integers
var enums = require('./enums.js');
_.extend(module.exports, enums);

// resolving the static names

//- our private stuff
var DEBUG = false;

var _bus;
var _cb;
var _devices;

var _stateChangedListeners = [];
var _wifiStateChangedListeners = [];

var _wifiInterface;

//- our exports

module.exports.settings = {listConnections: listConnections};
// this should get called to setup everything
module.exports.dbusConnect = dbusConnect;
// all found interfaces will be accessible here
module.exports.interfaces = {};

module.exports.getStatus = getStatus;
module.exports.getWifi = getWifi;

module.exports.listConnections = listConnections;
module.exports.getConnectionSecrets = getConnectionSecrets;
module.exports.updateConnection = updateConnection;

module.exports.connectToNetwork = connectToNetwork;
module.exports.connectToMatch = connectToMatch;

module.exports.registerStateChangedListener = registerStateChangedListener;
module.exports.registerWifiStateChangedListener = registerWifiStateChangedListener;

//- under the hood functions

/***
 * initializes the dbus interface and hands back the available interfaces
 * @param callback function(err, interfaces)
 */
function dbusConnect(callback) {
    _cb = callback;

    async.series(
        [getDevices
            , buildInterfaces
            , fillInterfaces
            , fillFunctions
            , callInitializingFunctions
            , registerDBusListeners
            , doCallback
        ]
    );
}

/**
 * inferfaces with networkmanager via dbus to get all registered network deviwces
 * @param callback function()
 */
function getDevices(callback) {
    checkForBus();
    _bus.invokeDbus({
        path: "/org/freedesktop/NetworkManager",
        interface: "org.freedesktop.NetworkManager",
        member: "GetDevices",
        destination: "org.freedesktop.NetworkManager"
    }, function (err, devs) {
        _devices = devs;
        callback();
    });
}

//TODO: put this function in front of every function that gets exported to ensure we have a bus
function checkForBus() {
    if (_bus == undefined) {
        _bus = dbus.systemBus();
    }
}


/**
 * generates the objects of the available interfaces for later filling
 * these are afterwards available under module.exports.interfaces
 * @param callback function()
 */
function buildInterfaces(callback) {
    var interfaceNames = [];
    var toDo = [];
    _.each(_devices, function (device, index) {
        toDo.push(function (cb) {
            getDeviceInterface(device, function (err, interface) {
                module.exports.interfaces[interface] = {device: device};
                cb();
            });

        });
    });
    async.parallel(toDo, callback);
}

function getDeviceInterface(device, callback) {
    checkForBus();
    getDBusProp(device, "org.freedesktop.NetworkManager.Device", "Interface", callback);
}

/**
 * adds more key/value pairs to the interfaces
 * @param callback function()
 */
function fillInterfaces(callback) {
    var toDo = [];
    _.each(module.exports.interfaces, function (interface, name) {
        toDo.push(function (cb) {
            getType(interface, cb);
        });
        toDo.push(function (cb) {
            getState(interface, cb);
        });
    });
    async.parallel(toDo, callback);
}

/**
 * function used by fillInterfaces() to add the type of a nm interface to it
 * @param interface {{Object}} as provided by getDeviceInterface()
 * @param cb {{Function}} provided and needed by async
 */
function getType(interface, cb) {
    getDBusProp(interface.device, "org.freedesktop.NetworkManager.Device", "DeviceType", function (err, type) {
        interface.type = type;
        cb();
    });
}

/**
 * function used by fillInterfaces() to add the state of a nm interface to it
 * @param interface {{Object}} as provided by getDeviceInterface()
 * @param cb {{Function}} provided and needed by async
 */
function getState(interface, cb) {
    getDBusProp(interface.device, "org.freedesktop.NetworkManager.Device", "State", function (err, state) {
        interface.state = state;
        cb();
    });
};


/**
 * adds functionality to the interfaces
 * @param callback function()
 */
function fillFunctions(callback) {
    var toDo = [];
    _.each(module.exports.interfaces, function (interface, name) {
        if (interface.type == enums.NM_DEVICE_TYPE_WIFI) {
            interface.disconnect = buildWifiDisconnect(interface);
            interface.getAccessPoints = buildWifiGetAccessPoints(interface);
        }
    })
    async.parallel(toDo, callback);
}


/**
 * creates the function to disconnect the wifi
 * @param interface
 * @returns {Function}
 */
function buildWifiDisconnect(interface) {
    return function (callback) {
        _bus.invokeDbus({
            path: interface.device,
            interface: "org.freedesktop.NetworkManager.Device",
            member: "Disconnect",
            destination: "org.freedesktop.NetworkManager"
        }, callback);
    }

}

/**
 * creates the function to get all found accessPoints by this interface
 * @param interface
 * @returns {Function}
 */
function buildWifiGetAccessPoints(interface) {
    return function (callback) {
        var accessPointNames = [];
        var accessPoints = [];
        var toDo = [];
        _bus.invokeDbus({
            path: interface.device,
            interface: "org.freedesktop.NetworkManager.Device.Wireless",
            member: "GetAccessPoints",
            destination: "org.freedesktop.NetworkManager"
        }, function (err, accessPointNames) {
            _.each(accessPointNames, function (ap, index) {
                toDo.push(function (cb) {
                    getAccessPointProperties(ap, function (err, apProperties) {
                        accessPoints.push(apProperties);
                        cb();
                    })
                });
            });
            if (typeof callback === 'function') {
                async.parallel(toDo, function () {
                    callback(null, accessPoints);
                });
            } else {
                async.parallel(toDo);
            }
        });
    }
}


/**
 * collects all the accesspoint properties and returns them as an object
 * the list of porperties was taken from https://developer.gnome.org/NetworkManager/0.9/spec.html
 * @param accessPoint String like "/org/freedesktop/NetworkManager/AccesssPoint/209"
 * @param cb function( Object error, Object properties )
 */
function getAccessPointProperties(accessPoint, cb) {
    log("  getAccessPointProperties(" + accessPoint + ",db)");
    var propertiesList = ['Flags', 'WpaFlags', 'RsnFlags', 'Ssid', 'Frequency', 'HwAddress', 'Mode', 'MaxBitrate', 'Strength'];
    var toDo = [];
    var properties = {};
    properties.path = accessPoint;
    _.each(propertiesList, function (property, index) {
        toDo.push(function (callback) {
            log("getDBusProp(" + accessPoint + ",'org.freedesktop.NetworkManager.AccessPoint'," + property + ",function(err, propertyState)");
            getDBusProp(accessPoint, 'org.freedesktop.NetworkManager.AccessPoint', property, function (err, propertyState) {
                if (err) {
                    return cb(err);
                }
                if (property == 'Ssid') {
                    properties[property] = bin2String(propertyState);
                } else {
                    properties[property] = propertyState;
                }
                callback();
            })
        })
    })

    async.parallel(toDo, function () {
        cb(null, properties)
    });
}

function callInitializingFunctions(cb) {
    cb();
}

/**
 * subscribe to all relevant DBus signals and hand them out to the registered listeners
 * @param cb function() generated by async
 */
function registerDBusListeners(cb) {
    // for wifiStateChangedListeners
    getWifi(function(err, wifi){
        if ( wifi ){
            _bus.getService('org.freedesktop.NetworkManager').getInterface(
                wifi.device,
                'org.freedesktop.NetworkManager.Device',
                function (err, signals) {
                    signals.on('StateChanged', function (state, oldState, reason) {
                        var verboseState = enums.resolveNM_STATE(state) + " " + enums.resolveNM_DEVICE_STATE_REASON(reason);
                        var recievedStuf = { state: state
                                           , oldState: oldState
                                           , reason: reason
                                           ,resolved: { state: enums.resolveNM_STATE(state)
                                                      , oldState: enums.resolveNM_STATE(oldState)
                                                      , reason: enums.resolveNM_DEVICE_STATE_REASON(reason)
                                                      }
                                           }

                        _.each(_wifiStateChangedListeners, function (listener) {
                            listener(verboseState, recievedStuf );
                        })
                    })
                }
            )
        }

        // for stateChangedListeners
        _bus.getService('org.freedesktop.NetworkManager').getInterface(
            '/org/freedesktop/NetworkManager',
            'org.freedesktop.NetworkManager',
            function (err, signals) {
                signals.on('StateChanged', function (state) {
                    var verboseState = module.exports.resolveNM_STATE(state);
                    _.each(_stateChangedListeners, function (listener) {
                        listener(verboseState, state);
                    })
                })
            }
        )


    });

    cb();
}

/**
 * call the callback specified in dbusConnect(callback)
 */
function doCallback() {
    _cb(null, module.exports.interfaces);
}


/**
 * introspection test
 * @param callback function(err,introspectData)
 */
function introspect(callback) {
    _bus.invoke({
        destination: 'org.freedesktop.NetworkManager',
        path: '/org/freedesktop/NetworkManager/Settings',
        interface: 'org.freedesktop.DBus.Introspectable',
        member: 'Introspect'
    }, callback)
}

/**
 * convenience function for a standard dbus 'Get' call
 * @param path String
 * @param interface String containing the interface one wants to get a property from
 * @param property String naming the property
 * @param callback funtion( object error, object property )
 */
function getDBusProp(path, interface, property, callback) {
    _bus.invokeDbus({
        path: path,
        interface: "org.freedesktop.DBus.Properties",
        member: "Get",
        destination: "org.freedesktop.NetworkManager",
        body: [interface, property],
        signature: "ss"
    }, callback);
}


/**
 * gets all saved connections and hands them to the callback
 * @param callback function( object err, object savedConnections )
 */
function listConnections(callback) {
    var connections = [];
    var toDo = [];
    _bus.invokeDbus({
        path: "/org/freedesktop/NetworkManager/Settings",
        interface: "org.freedesktop.NetworkManager.Settings",
        member: "ListConnections",
        destination: "org.freedesktop.NetworkManager"
    }, function (err, connectionNames) {
        _.each(connectionNames, function (connection, index) {
            toDo.push(function (cb) {
                getConnectionSettings(connection, function (err, connectionSettings) {
                    connections.push(connectionSettings);
                    cb();
                })
            });
        });
        async.parallel(toDo, function () {
            callback(null, connections);
        })
    });
}

function getConnectionSettings(connection, callback) {
    _bus.invokeDbus({
        path: connection,
        interface: "org.freedesktop.NetworkManager.Settings.Connection",
        member: "GetSettings",
        destination: "org.freedesktop.NetworkManager"
    }, function (err, settings) {
        if (err) return callback(err);
        settings.path = connection;
        //if (settings["802-11-wireless"]) {
        //    settings["802-11-wireless"].ssid = bin2String(settings["802-11-wireless"].ssid);
        //    settings["802-11-wireless"]["mac-address"] = bin2Mac(settings["802-11-wireless"]["mac-address"])
        //}
        callback(null, settings);
    });
}


function getConnectionSecrets(connection, callback) {
    _bus.invokeDbus({
        path: connection.path,
        interface: "org.freedesktop.NetworkManager.Settings.Connection",
        member: "GetSecrets",
        signature: "s",
        body: ["802-11-wireless-security"],
        destination: "org.freedesktop.NetworkManager"
    }, function (err, secrets) {
        if (err) return callback(err);
        callback(null, secrets);
    });
}

function cleanupSettings(settings) {
    if (Object.prototype.toString.call(settings) !== '[object Array]') {
        return settings;
    }
    var newSettings = {};
    _.each(settings, function (item, index) {
        newSettings[item[0]] = cleanupSettings(item[1]);
    });
    return newSettings;
}


/**
 * convenience function to get the first wifi interface that is available
 * returns an error if none are available
 * @param callback function( object err, object wifiInterface )
 */
function getWifi(callback) {
    if (typeof _wifiInterface == "object"){
        return callback(null, _wifiInterface);
    }
    var found = false;
    _.each(module.exports.interfaces, function (interface, name) {

        //console.log(interface.type, enums.NM_DEVICE_TYPE_WIFI);
        if (true && interface.type == enums.NM_DEVICE_TYPE_WIFI) {
            callback(null, interface);
            _wifiInterface = interface;
            found = true;
        }
    });
    if (!found) {
        return callback(new Error('could not find a wifi interface'), null);
    }
}

/**
 * convenience function that returns a general status synopsis of all networks
 * @param callback function( object err, object status )
 */
function getStatus(callback) {
    log("getStatus gets called");
    var status = {interfaces: module.exports.interfaces};
    getActiveConnection(function (err, connection) {
        if (err) return callback(err);

        // check if the connection we got from dbus
        // is actually more than an empty string
        if (connection != "") {
            log(" got an active connection: " + connection);
            getAccessPointByActiveConnection(connection[0], function (err, ap) {
                if (err) {
                    console.error(err);
                    return callback(err);
                }
                log(" got the corresponding access point " + ap);

                getAccessPointProperties(ap, function (err, apDetails) {
                    if (err) {
                        console.error(err);
                        return callback(err);
                    }

                    log(" got the details of the access point");
                    status.activeConnection = {
                        connection: connection
                        , accessPoint: ap
                        , apDetails: apDetails
                    }
                    getWifi(function (err, wifi) {
                        if (err) {
                            callback(err);
                            console.error(err);
                        } else {
                            wifi.getAccessPoints(function (err, accessPoints) {
                                if (err) {
                                    callback(err);
                                    console.error(err);
                                } else {
                                    filterAccessPoints(accessPoints, function (err, aps) {
                                        status.accessPoints = aps;
                                        listConnections(function (err, connections) {
                                            if (err) {
                                                error("error fetching settings");
                                                callback(error, null);
                                            }

                                            status.connections = connections;
                                            callback(null, status);
                                        });
                                    });

                                }
                            });
                        }
                    });
                });
            });

            // no active connection ( connection was an empty string )
        } else {
            log('no active connection')
            getWifi(function (err, wifi) {
                if (err) {
                    callback(err);
                    console.error(err);
                } else {
                    wifi.getAccessPoints(function (err, accessPoints) {
                        if (err) {
                            callback(err);
                            console.error(err);
                        } else {
                            filterAccessPoints(accessPoints, function (err, aps) {
                                status.accessPoints = aps;
                                //console.log('status.accesspoints', status.accessPoints);
                                listConnections(function (err, connections) {
                                    if (err) {
                                        error("error fetching settings");
                                        callback(error, null);
                                    }

                                    status.connections = connections;
                                    callback(null, status);
                                });
                            });
                        }
                    });
                }
            });
        }
    });
}


/**
 * filters duplicate accesspoints via ssid,
 * adds matching connecitons to them,
 * resolves its flags
 * @param accessPoints {Array} of accessPoints as provided by wifi.getAccessPoints()
 * @param callback {Function} function(err, accessPoints)
 */
function filterAccessPoints(accessPoints, callback) {
    var filteredArray = [];
    var ssids = {};
    async.series([function (cb) {
        listConnections(function (err, connections) {
            if (err) {
                error("error fetching settings");
                callback(new Error('error fetching settings'), null);
            }
            // remove duplicate ssids
            _.each(accessPoints, function (ap) {
                if (ssids[ap.Ssid] == null) {
                    ssids[ap.Ssid] = ap;
                } else {
                    if (ssids[ap.Ssid].Strength < ap.Strength) {
                        ssids[ap.Ssid] = ap;
                    }
                }
                // adds known connections if they match the ssid
                _.each(connections, function (con) {
                    if (con["802-11-wireless"] == null) return;
                    if (ap.Ssid == con["802-11-wireless"].ssid) {
                        if ((ap.connection == null) // only add the newest connection
                            || (ap.connection != null && ap.connection.connection.timestamp < con.connection.timestamp )) {
                            ap.connection = con;
                        }
                    }
                })

                // resolve flags
                ap.resolved =
                {
                    RsnFlags: module.exports.resolveNM_802_11_AP_SEC(ap.RsnFlags)
                    , Flags: module.exports.resolveNM_802_11_AP_FLAGS(ap.Flags)
                }

                // add empty connection to unprotected wifi for easy access
                if ( ap.connection == undefined ){
                    ap = addConnection(ap);
                    //ap.connection = { ipv4: { method: "auto"} };
                }


            });
            cb();
        });
    }, function (cb) {
        filteredArray = _.toArray(ssids);
        callback(null, filteredArray);
        cb();
    }]);
}

/**
 * adds new connection Details to the accessPoint for an eventual connection
 * @param ap {Object} accessPoint
 * @returns {Object} accessPoint including an connection and the ap.needsSecrets boolean
 */
function addConnection(ap){
    ap.connection = { ipv4: { method: "auto"} };

    // If the wireless connection has any security restrictions,
    // like 802.1x, WEP, or WPA, set the security property to '802-11-wireless-security'
    // and ensure the connection contains a valid 802-11-wireless-security setting.
    if (ap.Flags == enums.NM_802_11_AP_FLAGS_PRIVACY ){
        ap.needsSecrets = true;
        ap.connection["802-11-wireless"] = { security : "802-11-wireless-security"};
        ap.connection["802-11-wireless-security"] = { "key-mgmt": getKeyManagement(ap), 'psk-flags': 0};
    }


    return ap;
}


/**
 * returns the correct key management string for a given AP
 * @param ap {Object} accessPoint
 * @returns {string}
 */
function getKeyManagement(ap){
    // wpa
    if ( ap.RsnFlags & enums.NM_802_11_AP_SEC_KEY_MGMT_PSK ) {
        if (ap.Mode == enums.NM_802_11_MODE_INFRA)
            return "wpa-psk";
        if (ap.Mode == enums.NM_802_11_MODE_ADHOC)
            return "wpa-none";
    }
    //TODO: add other encryption methods
    return "unhandled";
}

/**
 * Get the active connection paths
 * Result shoule be like: ['/org/freedesktop/NetworkManager/ActiveConnection/187']
 * @param callback function( object err, array connection )
 */
function getActiveConnection(callback) {
    getDBusProp("/org/freedesktop/NetworkManager", "org.freedesktop.NetworkManager", 'ActiveConnections', callback);
}


/**
 * Get the accesspoint associated with a connection
 * @param callback function( object err, object apDetails )
 */
function getAccessPointByActiveConnection(connection, callback) {
    log("  getAccessPointByActiveConnection(" + connection + ", callback)");
    getDBusProp(connection, "org.freedesktop.NetworkManager.Connection.Active", 'SpecificObject', callback);
}



/**
 * connects via wifi to a matching pair of connection and device
 * @param match : object with connection/accesspPoint pair like they
 * are provided from getStatus()
 * @param callback function(Object error, string newConnection)
 */
function connectToMatch(match, callback) {
    if (match.connection == undefined) {
        return callback(new Error("no connection provided with that match"), null);
    }

    getWifi(function (err, wifi) {
        //console.log(match);
        if ( typeof match.connection.path === "string"){
            var connection = match.connection.path;
            var accessPoint = match.path;
            connectToNetwork(connection, wifi.device, accessPoint, function (err, success) {
                callback(err, success);
            });
        } else {
            var connection = match.connection;
            var accessPoint = match.path;
            connectToNewNetwork(connection,wifi.device,accessPoint, function(err, success){
            });
        }
    });
}



/**
 * connects to a specific wireless network
 * @param setting     string like "/org/freedesktop/NetworkManager/Settings/10"
 * @param device      string like "/org/freedesktop/NetworkManager/Devices/0"
 * @param accesspoint string like "/org/freedesktop/NetworkManager/AccesssPoint/209"
 * @param callback    function( object err, NOIDEAYET )
 */
function connectToNetwork(setting, device, accesspoint, callback) {
    //console.log(setting, device, accesspoint);
    _bus.invokeDbus({
        path: "/org/freedesktop/NetworkManager",
        interface: "org.freedesktop.NetworkManager",
        member: "ActivateConnection",
        destination: "org.freedesktop.NetworkManager",
        signature: 'ooo',
        body: [setting, device, accesspoint],
    }, function (err, data) {
        if (err) {
            console.log(err);
            return callback(err);
        }
        //console.log(data)
        callback(null, data);
    });
}

/**
 * connects to a new wireless network connection
 * @param setting     {Array} Connection settings and properties;
 *                            if incomplete missing settings will be automatically
 *                            completed using the given device and specific object.
 * @param device      string like "/org/freedesktop/NetworkManager/Devices/0"
 * @param accessPoint string like "/org/freedesktop/NetworkManager/AccesssPoint/209"
 * @param callback    function( object err, NOIDEAYET )
 */
function connectToNewNetwork(setting, device, accessPoint, callback) {

    _bus.invoke({
        destination: 'org.freedesktop.NetworkManager',
        path: '/org/freedesktop/NetworkManager/Settings',
        interface: 'org.freedesktop.DBus.Introspectable',
        member: 'Introspect'
    }, function(err, data){
        console.log(data);
    });

    _bus.invokeDbus({
        path: "/org/freedesktop/NetworkManager",
        interface: "org.freedesktop.NetworkManager.Settings",
        member: "AddConnection",
        destination: "org.freedesktop.NetworkManager",
        signature: "a{sa{sv}}",
        body: [setting]
    }, function(err, connection){
        if (err) {
            console.log(err);
            return callback(err);
        }
        if ( false || accessPoint.connection['802-11-wireless-security']['key-mgmt'] == 'wpa-psk'){
            //TODO: ja genau
        } else {
            _bus.invokeDbus({
                path: "/org/freedesktop/NetworkManager",
                interface: "org.freedesktop.NetworkManager",
                member: "ActivateConnection",
                destination: "org.freedesktop.NetworkManager",
                signature: 'a{sa{sv}}oo',
                body: [connection, device, accessPoint],
            }, function (err, data) {
                if (err) {
                    console.log(err);
                    return callback(err);
                }
                callback(null, data);
            });
        }
    });
}


function updateConnection (connection, callback){
    var path = connection.path;
    delete connection.path;
    delete connection.angular;
    delete connection.format;
    console.log(connection);
    console.log(path);
    _bus.invokeDbus({
        path: path,
        interface: "org.freedesktop.NetworkManager.Settings.Connection",
        member: "Update",
        destination: "org.freedesktop.NetworkManager",
        signature: "a{sa{sv}}",
        body: [connection]
    }, function(err, connection){
        if (err) {
            console.log(err);
            return callback(err);
        }
        return callback(null, data);
    });
}

/**
 * adds a function that will be called when we get notified via dbus that
 * something has changed
 * @param func function(string stateDescription, int state)
 */
function registerStateChangedListener(func) {
    if (typeof func === 'function') {
        _stateChangedListeners.push(func);
    }
}

/**
 * adds a function that will be called when we get notified via dbus that
 * something on the primary wifi interface has changed
 * @param func function(string stateDescription, int state)
 */
function registerWifiStateChangedListener(func) {
    if (typeof func === 'function') {
        _wifiStateChangedListeners.push(func);
    }
}


/***************************************************************************
 * HELPERS
 */

/**
 * converts an array of integers representing charCodes into a string
 * @param array of integers representing charCodes
 * @returns {string}
 */
function bin2String(array) {
    var result = "";
    for (var i = 0; i < array.length; i++) {
        result += String.fromCharCode(parseInt(array[i]));
    }
    return result;
}

/**
 * converts an array of integers representing a mac address into a string
 * @param array of integers representing a mac address
 * @returns {string}
 */
function bin2Mac(array) {
    var result = "";
    for (var i = 0; i < array.length; i++) {

        result += array[i].toString(16);
        if (i < array.length - 1) {
            result += ':';
        }
    }
    return result;
}

function log(message) {
    if (DEBUG) console.log("::[nm-dbus-native] %s", message);
}

function error(error) {
    console.error("::[nm-dbus-native] %s", error);
}